Bruteforce:

          class Solution {
          public:
              bool canTransform(string current, string &target) {
                  if (current == target) return true;
          
                  for (int i = 0; i < current.size(); i++) {
                      if (current[i] == 'L' && i > 0 && current[i - 1] == '_') {
                          swap(current[i], current[i - 1]);
                          return canTransform(current, target) ;
                          swap(current[i], current[i - 1]);
                      } else if (current[i] == 'R' && i + 1 < current.size() && current[i + 1] == '_') {
                          swap(current[i], current[i + 1]);
                          return canTransform(current, target) ;
                          swap(current[i], current[i + 1]);
                      }
                  }
          
                  return false;
              }
          
              bool canChange(string start, string target) {
                  if (start.size() != target.size()) return false;
          
                  return canTransform(start, target);
              }
          };



Optimal:

          class Solution {
          public:
              
              bool canChange(string start, string target) {
                  if (start.size() != target.size()) return false;
                  int i=0, j=0;
                  int n=start.size();
                  while(i<start.size() && j<target.size()){
                      while(start[i]=='_') i++;
                      while(target[j]=='_') j++;
                      if (i == n && j == n) return true;            
                      if (i == n || j == n) return false;
                      if(start[i]!=target[j]) return false;
                      if(start[i]=='L'){
                          if(i<j) return false;
                      }
                      if(start[i]=='R'){
                          if(i>j) return false;
                      }
                      i++;
                      j++;
                  }
                  while (i < n && start[i] == '_') i++;
                  while (j < n && target[j] == '_') j++;
                  
                  return i == j; 
              }
          };
